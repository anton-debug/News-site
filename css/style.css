html {
	box-sizing: border-box; /* Свойства width и height включают в себя значения padding и border, но не margin. */
}

*, /* Свойства этого селектора применяется для всех тэгов */
*::before, /*  для всех тегов применить псевдоэлемент ::before, который применяется для отображения контента до содержимого элемента, к которому он добавляется. Работает совместно со свойством content. По умолчанию ::before создаёт строчный элемент.*/
*::after /*  для всех тегов применить псевдоэлемент, который используется для вывода контента после содержимого элемента, к которому он добавляется. Псевдоэлемент ::after работает совместно со свойством content. По умолчанию ::after создаёт строчный элемент.*/{
	box-sizing: inherit; /* Наследует значение родителя.*/
}

body {
	min-width: 1000px; /* Для элементов тэга body задать мин ширину */
	margin: 0px; /* Для элементов тэга body обнулить внешние отступы */
	background-color: #f6f6f6; /* Для элементов тэга body задать цвет фона */
	font-family: "Arial", sans-serif; /* Для элементов тэга body задать шрифт */
	font-size: 16px; /* Для элементов тэга body задать размер шрифта */
	/* line-height: 1; */ /* Для элементов тэга body межстрочный интервал */
	color: black; /* Для элементов тэга body задать цвет текста */
}

body.modal-active {
	overflow: hidden; /* управляет отображением содержания блочного элемента, если оно целиком не помещается и выходит за область заданных размеров. hidden - отображается только область внутри элемента, остальное будет скрыто.*/
}

img {
	max-width: 100%; 
}     /* задает для всех картинок макс ширину в 100% от родителя */

a {
	text-decoration: none;  /* для всех ссылок отключает подчеркивание */
	color: inherit; /* для всех ссылок задает цвет текста, наследуемое от родителя */
}

/* Декларация CSS !important отвечает за приоритет в стилях в случае спорных моментах. Если мы указали эту декларацию, то мы подчеркиваем то, что это свойство является главным. */

.visually-hidden { /*  */
	position: absolute; /* Вырывает элемент из потока  */
	clip: rect(1px 1px 1px 1px); /* IE6, IE7 */ /*Свойство clip определяет область позиционированного элемента, в которой будет показано его содержимое. Все, что не помещается в эту область, будет обрезано и становится невидимым. На данный момент единственно доступная форма области — прямоугольник. Все остальное остается только в мечтах. clip работает только для абсолютно позиционированных элементов.*/
	clip: rect(1px, 1px, 1px, 1px);
	padding: 0 !important; /* обнуляем падинги для этого класса */
	border: 0 !important; /*обнуляем рамки для этого класса */
	height: 1px !important; /* зыдаем приоритетную высоту для этого класса */
	width: 1px !important; /* зыдаем приоритетную щирину для этого класса */
	overflow: hidden;
}

.clearfix::after { /* Псевдоэлементы позволяют с помощью CSS вставить в структуру HTML-документа узлы, которых нет в HTML коде. То есть можно вставить в код элемент и не писать его в HTML. Благодаря псевдоэлементам появилось решение проблемы флоатов без использования дополнительного элемента. */
	content: ""; /* Позволяет вставлять генерируемое содержание в текст веб-страницы, которое первоначально в тексте отсутствует. Применяется совместно с псевдоэлементами :after и :before, они соответственно указывают отображать новое содержимое после или до элемента, к которому добавляются. */
	display: table; /* С его помощью можно получить истинное выравнивание по вертикали элементов с динамической высотой. */
	clear: both; /* Отменяет обтекание элемента одновременно с правого и левого края. Это значение рекомендуется устанавливать, когда требуется снять обтекание элемента, но неизвестно точно с какой стороны. */
	
}

.container { /* Задаем фиксированную ширину контейнера и ставим его по центру */
	width: 1000px;
	margin: 0 auto;
} 